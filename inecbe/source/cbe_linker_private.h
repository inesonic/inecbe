/*-*-c++-*-*************************************************************************************************************
* Copyright 2016 - 2022 Inesonic, LLC.
* 
* This file is licensed under two licenses.
*
* Inesonic Commercial License, Version 1:
*   All rights reserved.  Inesonic, LLC retains all rights to this software, including the right to relicense the
*   software in source or binary formats under different terms.  Unauthorized use under the terms of this license is
*   strictly prohibited.
*
* GNU Public License, Version 2:
*   This program is free software; you can redistribute it and/or modify it under the terms of the GNU General Public
*   License as published by the Free Software Foundation; either version 2 of the License, or (at your option) any later
*   version.
*   
*   This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied
*   warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more
*   details.
*   
*   You should have received a copy of the GNU General Public License along with this program; if not, write to the Free
*   Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.
********************************************************************************************************************//**
* \file
*
* This header defines the Cbe::Linker::Private class.
***********************************************************************************************************************/

/* .. sphinx-project inecbe */

#ifndef CBE_LINKER_PRIVATE_H
#define CBE_LINKER_PRIVATE_H

#include <QString>
#include <QList>
#include <QSharedPointer>

#include "cbe_common.h"
#include "cbe_linker.h"
#include "linker_impl.h"
#include "cbe_source_range.h"

namespace Cbe {
    class LinkerNotifier;

    /**
     * Underlying implementation for the Linker::Private class.  This class is a very thin wrapper on the
     * \ref LinkerImpl class that contains the actual implementation.  This class exists to decouple call-backs from
     * the interface from the underlying implementation.
     */
    class CBE_PUBLIC_API Linker::Private:public LinkerImpl {
        public:
            /**
             * Constructor
             *
             * \param[in] newNotifier The notifier to receive status updates on the linker activity.
             *
             * \param[in] interface   Pointer to the interface class to receive callbacks.
             */
            Private(LinkerNotifier* newNotifier, Linker* interface);

            ~Private() override;

        protected:
            /**
             * Method that generates the default list of command line switches that would be issued to the linker
             * backend.
             *
             * \return Returns a default list of command line switches.  The command line switches should omit inputs,
             *         libraries, and the output file as these are added separately.
             */
            QList<QString> setDefaultSwitches() const final;

            /**
             * Method that propagates the linker started notification to the interface class.
             *
             * \param[in] context The context that is being executed.
             */
            void linkerStarted(QSharedPointer<LinkerContext> context) final;

            /**
             * Method that propagates the linker finished notification to the interface class.
             *
             * \param[in] context The context that is being executed.
             *
             * \param[in] success Holds true if the linker completed successfully, returns false if an error is
             *                    reported.
             */
            void linkerFinished(QSharedPointer<LinkerContext> context, bool success) final;

            /**
             * Method that propagates diagnostic information to the interface class.
             *
             * \param[in] context           The context that is being executed.
             *
             * \param[in] diagnosticMessage The diagnostic message generated by the linker.
             */
            void handleLinkerDiagnostic(
                QSharedPointer<LinkerContext> context,
                const QString&                diagnosticMessage
            ) final;

        private:
            Linker* iface;
    };
};

#endif
